{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AdirSinai\\\\Desktop\\\\lumen-project\\\\client\\\\src\\\\components\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport moment from \"moment\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [data, setData] = useState({\n    initData: [],\n    subs: [],\n    changeMonth: [],\n    changeYear: []\n  });\n  const [newData, setNewData] = useState([{\n    date: [],\n    subs: [],\n    changeMonth: [],\n    changeYear: []\n  }]);\n  useEffect(() => {\n    fetch(\"/api\").then(response => response.json()).then(data => {\n      let date = data.data.map(d => d.date);\n      let subs = data.data.map(e => e.new_subscriptions);\n      let newMonth = [0];\n      let newYear = [0];\n\n      for (var i = 0; i < subs.length - 1; i++) {\n        const month = subs[i + 1] * 100 / subs[i] - 100;\n        newMonth.push(+month.toFixed(2));\n        const years = subs[i + 12] * 100 / subs[i] - 100;\n        newYear.push(+years.toFixed(2) || 0);\n      }\n\n      setNewData([{\n        date: date,\n        subs: subs,\n        changeMonth: newMonth,\n        changeYear: newYear\n      }]);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Month\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"New Subscriptions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Change from last month(%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Change from last year (%)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: newData.map((data, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"row\",\n              children: \"Skill\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this), data.date.map(d => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: moment(d).format(\"MMM YYYY\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"row\",\n              children: \"Skill\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), data.subs.map(sub => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: sub\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"row\",\n              children: \"Skill\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this), data.changeMonth.map(m => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: m\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"row\",\n              children: \"Skill\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), data.changeYear.map(y => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: y\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"YDAsZEeRHS70n9V58YkofgZJtv8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","moment","useEffect","useState","App","data","setData","initData","subs","changeMonth","changeYear","newData","setNewData","date","fetch","then","response","json","map","d","e","new_subscriptions","newMonth","newYear","i","length","month","push","toFixed","years","format","sub","m","y"],"sources":["C:/Users/AdirSinai/Desktop/lumen-project/client/src/components/App.jsx"],"sourcesContent":["import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState({\r\n    initData: [],\r\n    subs: [],\r\n    changeMonth: [],\r\n    changeYear: [],\r\n  });\r\n\r\n  const [newData, setNewData] = useState([\r\n    { date: [], subs: [], changeMonth: [], changeYear: [] },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        let date = data.data.map((d) => d.date);\r\n        let subs = data.data.map((e) => e.new_subscriptions);\r\n\r\n        let newMonth = [0];\r\n        let newYear = [0];\r\n        for (var i = 0; i < subs.length - 1; i++) {\r\n          const month = (subs[i + 1] * 100) / subs[i] - 100;\r\n          newMonth.push(+month.toFixed(2));\r\n          const years = (subs[i + 12] * 100) / subs[i] - 100;\r\n          newYear.push(+years.toFixed(2) || 0);\r\n        }\r\n\r\n        setNewData([\r\n          {\r\n            date: date,\r\n            subs: subs,\r\n            changeMonth: newMonth,\r\n            changeYear: newYear,\r\n          },\r\n        ]);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Month</th>\r\n            <th>New Subscriptions</th>\r\n            <th>Change from last month(%)</th>\r\n            <th>Change from last year (%)</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {newData.map((data, i) => (\r\n            <>\r\n              <tr>\r\n                <th scope=\"row\">Skill</th>\r\n                {data.date.map((d) => (\r\n                  <td>{moment(d).format(\"MMM YYYY\")}</td>\r\n                ))}\r\n              </tr>\r\n\r\n              <tr>\r\n                <th scope=\"row\">Skill</th>\r\n                {data.subs.map((sub) => (\r\n                  <td>{sub}</td>\r\n                ))}\r\n              </tr>\r\n\r\n              <tr>\r\n                <th scope=\"row\">Skill</th>\r\n                {data.changeMonth.map((m) => (\r\n                  <td>{m}</td>\r\n                ))}\r\n              </tr>\r\n\r\n              <tr>\r\n                <th scope=\"row\">Skill</th>\r\n                {data.changeYear.map((y) => (\r\n                  <td>{y}</td>\r\n                ))}\r\n              </tr>\r\n            </>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}